#!/usr/bin/env ruby
# frozen_string_literal: true

require "dorian/arguments"
require "fileutils"
require "git"

parsed =
  Dorian::Arguments.parse(
    version: {
      alias: :v
    },
    help: {
      alias: :h
    }
  )

abort parsed.help if parsed.options.help

if parsed.options.version
  abort File.read(File.expand_path("../../VERSION", __FILE__))
end

DIR = parsed.files.first || parsed.arguments.first || "."

IGNORE_FILE = File.expand_path("#{DIR.chomp("/")}/.dotignore")
IGNORE_CONTENT = File.exist?(IGNORE_FILE) ? File.read(IGNORE_FILE) : ""

IGNORE_PATTERNS =
  IGNORE_CONTENT
    .lines
    .map(&:strip)
    .reject { |line| line.empty? || line.start_with?("#") }
    .map { |pattern| Regexp.new("\\A#{pattern}\\z") }

def ignore?(path)
  IGNORE_PATTERNS.any? { |pattern| pattern.match?(path) }
end

Git
  .open(DIR)
  .ls_files
  .map(&:first)
  .each do |file|
    next if ignore?(file)

    homefile = "#{Dir.home}/#{file}"
    dotfile = File.expand_path("#{DIR.chomp("/")}/#{file}")
    File.delete(homefile) if File.exist?(homefile) || File.symlink?(homefile)
    FileUtils.mkdir_p(File.dirname(homefile))
    FileUtils.ln_s(dotfile, homefile, verbose: true)
  end
